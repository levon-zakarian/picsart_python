"""
Ունենք inc և dec ֆունկցիաները։ inc-ը վերադարձնում է արգումենտին գումարած 1 արժեքը,
իսկ dec-ը արգումենտից հանած 1 արժեքը
"""

def inc(a):
	return a + 1
def dec(a):
	return a - 1

"""
Կիրառելով պարամետրերի փոխարինման մոդելը, պարզաբանեք հետևյալ ֆունկցիաներից յուրաքանչյուրից առաջացող գործընթացները,
դրանցից որն է ռեկուրսիվ, որը պոչավոր ռեկուրսիվ, պատասխանը հիմնավորեք
"""
def add1(a, b):
	if a == 0:
		return b
	else:
		inc(add1(dec(a), b))

"""
Ֆունկցիան առաջին անգամ add1 մուտք գործելով stack-ում ունենում է 4,5, a != 0 => մտնում է else, որտեղ inc-ում որպես
առգումենտ ընդունում է dec(a),b և նոր stack-է (սակայն նախորդը սպասում է) բացվում արդեն dec(4)-ը վերադարձնելով
3 այսինքն  (3,5), բացվում է կրկին նոր stack (dec(3),5) (նախորդը էլի սպասելով) այսինքնք (2,5), որից հետո
կրկին նոր stack (1,5), հետո նոր (0,5), և վերջապես վերջինը որտեղից դուրս է գալիս return b-ով, որը վերադառնում է
inc(add(0,5) => 5) stack, որից հետո inc(6) stack, ապա inc(7) stack => inc(8) stack => վերջապես 9 և վերադարձնում
Քանի որ ամեն անգամ ստեղծվում է նոր stack և այդ ընթացքում նախորդը սպասում է այս մեթոդը ռեկուրսիվ է
"""

def add2(a, b):
	if a == 0:
		return b
	else:
		return add2(dec(a), inc(b))

"""
add2-ում ուրիշ ձև է կատարվում երբ առաջին անգամ մուտք է գործում (4,5) արժեքով, a != 0 և անցնում է
add(dec(4),inc(5)), որտեղ կրկին scope էր են բացվում dec-ի և inc-ի համար, և դառնում է add(3,6), քանի որ ռեկուրսիվ
ֆունկցիան իր մեջ արժեք չունի որ պետք է սպասի, նորից է կանչվում վերագրելով նոր արժեքները, և կրկին 3 != 0,
add(dec(3),inc(6)) => add (2,7) => add (1,8) => add (0,9) և այս վերջին դեպքում a == 0, միանգամից return է անում
b-ի արժեքը՝ այսինքն 9։
Քանի որ ամենա անգամ նոր scope ստեղծվելու ժամանակ նախորդում չկա արժեք որ պետք է պահպանվի և սպասի միանգամից
վերագրվում է նույն a,b արժեքներին և դառնում է իտերատիվ տարբերակով, այսինքն պոչավոր ռեկուրսիվ
"""

print(add1(4,5))
print(add2(4,5))

